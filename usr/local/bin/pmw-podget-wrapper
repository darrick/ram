#!/bin/zsh

##########################################################################################
##########################################################################################
##
## pmw-podget-wrapper
##
## A PMW podget wrapper to do some sooper sofisiticated exception handling
## for the awesome podget bash script.
##
##########################################################################################
##########################################################################################

setopt REMATCH_PCRE
setopt NO_CASE_MATCH
zmodload zsh/regex
zmodload zsh/datetime

myName=${0##*/}

# This script complies with Semantic Versioning: http://semver.org/
vMajor=0
vMinor=2
vPatch=6
vHash='$Hash$'

# Get zsh functions necessary for this script.
if [[ -r ${ROOT:-/}usr/local/bin/zsh-functions ]] ; then
  source ${ROOT:-/}usr/local/bin/zsh-functions
else
  exit $(error ${myName} "Could not find support library '${ROOT:-/}usr/local/bin/zsh-functions'. Cannot continue.") ;
fi

##############################################################################
## Locally defined subroutines
##############################################################################

# How to use this command.
usage() {
  local myName=${1}

  ${CAT} <<EOF
${myName}: run podget with exception handling and notifications

Summary

${myName} [ --verbose (-v) ] [ --debug (-D) ] [ --version (-V) ]
                   [ --config (-c) <podget-configuration-file> ]
                   [ --config_notify (-n) <noification-configuration-file> ]
                   [ --dir_config (-d) <podget-directory-path> ]

Description

pmw-podget-wrapper is a ZSH sript that performs some sanity checking
before launching podget, then performing cleanup and further sanity
checking after the podget run completes.

pmw-podget-wrapper sends email notification of unexpected events to
all the addresses listed in the 'PODGET_MAILTO' parameter in the file
'${DIR_CONFIG}/${CONFIG_NOTIFY}'.

EOF
}

# Relevant runtime data in a key-value text file.
# Returns 0 on success, else 1 or other positive integer (see below for possibilities).
updateRuntimeData() {
  local myName=${1} ; shift
  local key=${1:?"Need a key to set or update in ${DIR_LOG}/${PODGET_RUNTIME_DATA}"}
  local value=${2:?"Need a value for key '${key}' to set or update in ${DIR_LOG}/${PODGET_RUNTIME_DATA}"}

  local tmpfile=$(${MKTEMP})

  trap "${RM} -f ${tmpfile} ; exit ; " 0 1 2 3

  # Make sure the runtime data state file exists.
  [[ -w ${DIR_LOG}/${PODGET_RUNTIME_DATA} ]] || ${TOUCH} ${DIR_LOG}/${PODGET_RUNTIME_DATA}

  # Attempt to delete the key and value.
  if [[ "${value}" == "DELETE" ]] ; then

    # Grab everything except the line with our key on it (we do not
    # care if the key is present in the file).
    ${GREP} -v "^${key} " ${DIR_LOG}/${PODGET_RUNTIME_DATA} > ${tmpfile}

    if ! ${MV} ${tmpfile} ${DIR_LOG}/${PODGET_RUNTIME_DATA} ; then
      error "${myName}" "ERROR: Failed to DELETE key '${key}' from '${DIR_LOG}/${PODGET_RUNTIME_DATA}'."
      trap - 0 1 2 3
      return 32

    fi

  elif ${GREP} -q "^${key} " ${DIR_LOG}/${PODGET_RUNTIME_DATA} ; then

    # Found this key, replace the value.
    ${SED} -i.bak -e "/^${key} /s/^.*/${key} ${value}/" ${DIR_LOG}/${PODGET_RUNTIME_DATA}

    # There should be exactly one line of difference between the
    # edited file and the original file (.bak)
    local diffOutput="$(${DIFF} -y --suppress-common-lines ${DIR_LOG}/${PODGET_RUNTIME_DATA} ${DIR_LOG}/${PODGET_RUNTIME_DATA}.bak)"
    local diffLineCount=$(echo "${diffOuput}" | wc -l)

    ${RM} -f ${DIR_LOG}/${PODGET_RUNTIME_DATA}.bak

    if (( diffLineCount != 1 )) ; then

      echo "${diffOutput}" > ${tmpfile}
      sendNotification ${myName} "${PODGET_MAILTO}" INTERNAL_ERROR "Unexpected change to '${DIR_LOG}/${PODGET_RUNTIME_DATA}' when trying to change key '${key}' to '${value}' (see attached). Aborting podget run." "${tmpfile}"
      ${RM} -f ${tmpfile}

      trap - 0 1 2 3
      return 34

    fi

  else

    # Add the new key, and keep the runtime data file sorted.
    (
      echo "${key} ${value}"
      ${CAT} ${DIR_LOG}/${PODGET_RUNTIME_DATA}
    ) | ${SORT} > ${tmpfile}

    if ! ${MV} ${tmpfile} ${DIR_LOG}/${PODGET_RUNTIME_DATA} ; then

      sendNotification ${myName} "${PODGET_MAILTO}" INTERNAL_ERROR "Failed to replace '${DIR_LOG}/${PODGET_RUNTIME_DATA}' with temporary file '${tmpfile}'. Aborting podget run."

      trap - 0 1 2 3
      return 36

    fi
  fi

  trap - 0 1 2 3

  return
}

# Housekeeping and other tasks to run before podget.
preRunProcess() {
  local myName=${1} ; shift
  local startTime=${1} ; shift
  local VERBOSE=${1}

  local doneArchive=${DIR_LOG}/archive/${LOG_COMPLETE}-${startTime}
  local returnValue=1

  # Copy the "done" file to the archive and add a timestamp to the
  # filename. This is a different archive process than the "error"
  # file because podget needs to remember which files it has already
  # downloaded in order to avoid retrieving the same file multiple
  # times. postRunProcess cleans up the old entries (FIFO).
  if ${CP} -p ${DIR_LOG}/${LOG_COMPLETE} ${doneArchive} ; then
    returnValue=${?}
  else
    warning ${myName} "Unable to copy '${DIR_LOG}/${LOG_COMPLETE}' to '${doneArchive}' (${?})."
    sendNotification ${myName} "${PODGET_MAILTO}" PRE_PROCESS_ERROR \
		     "Warning: Unable to copy '${DIR_LOG}/${LOG_COMPLETE}' to '${doneArchive}' (${?}). Podcast aging records may be off. Seek professional help if this condition persists."
  fi

  return ${returnValue}
}

# Housekeeping and other tasks to run after podget. Tasks include:
#
# - archive the contents of the "done" file (${LOG_COMPLETE}) for this
# run. We do this in order to be able to delete old entries that we no
# longer want. The assumption is that old podcasts are deleted from
# the feed server and we will not see them again. Without this
# housekeeping, the ${LOG_COMPLETE} file grows without bound. We want
# to keep 'done' files around for a while so we can see when a
# specific podcast was downloaded.
#
postRunProcess() {
  local myName=${1} ; shift
  local startTime=${1} ; shift
  local VERBOSE=${1}

  local doneArchive=${DIR_LOG}/archive/${LOG_COMPLETE}-${startTime}
  local archivePrefix=${LOG_COMPLETE}
  local returnValue=1
  local tmpfile

  # This temporary file will be used several times in this process.
  if ! tmpfile=$(${MKTEMP}) ; then
    error "${myName}" "Unable to create temporary storage for podget post processing (${?}). I am done."
    return 4
  fi

  trap "${RM} -f ${tmpfile} ${doneArchive} ; trap - ; return ;" 0 1 2 3

  # Find new additions to the LOG_COMPLETE file and save just those
  # lines.
  ${DIFF} ${doneArchive} ${DIR_LOG}/${LOG_COMPLETE} | ${AWK} '/^> /{print $2}' > ${tmpfile}

  # Save the diff output only if podget downloaded any new files.
  if [[ -s ${tmpfile} ]] ; then

    # Name the archive filename with a timestamp so we can easily see
    # the date and time of this podget run. This archive file contains
    # the names of files retrieved in this run of podget.
    checkSum=$(${SHA256SUM} ${tmpfile} | ${AWK} '{print $1}')
    if [[ -n "${checkSum}" ]] ; then
      if ! ${MV} ${tmpfile} ${DIR_LOG}/archive/${archivePrefix}-$(strftime "%Y%m%d:%H%M%S" ${startTime})-${checkSum} ; then
	warning "${myName}" "Unable to save '${tmpfile}' as completion file '${DIR_LOG}/archive/${archivePrefix}-$(strftime "%Y%m%d:%H%M%S" ${startTime})-${checkSum}' (${?})."
	${RM} -f ${tmpfile}
      fi
    else
      warning "${myName}" "Unable to calculate SHA256 checksum of '${tmpfile}' (${?})."
      ${RM} -f ${tmpfile}
    fi

  else
    ${RM} -f ${tmpfile}
  fi

  # Purge lines from LOG_COMPLETE that are older than
  # PODGET_AGE_THRESHOLD.
  if [[ -n "${PODGET_AGE_THRESHOLD}" ]] ; then

    ${FIND} ${DIR_LOG}/archive -maxdepth 1 -name ${archivePrefix}-\* -mtime +${PODGET_AGE_THRESHOLD} -print | while read filename ; do

      # Verify the checksum just for fun.
      checksum=$(${SHA256SUM} ${filename} | ${AWK} '{print $1}')
      if [[ ${filename##*done-} == ${checksum} ]] ; then

	# This is the crux of the aging process: use the contents of
	# the file ${filename} to search for and delete old entries
	# in the podget ${LOG_COMPLETE} file.
	if ${GREP} -v -f ${filename} ${DIR_LOG}/${LOG_COMPLETE} > ${tmpfile} ; then
	  if [[ -s ${tmpfile} ]] ; then
	    if ${MV} ${tmpfile} ${DIR_LOG}/${LOG_COMPLETE} ; then
	      notice ${myName} "Successfully purged $(${WC} -l ${filename}|${CUT} -d' ' -f1) row(s) from '${DIR_LOG}/${LOG_COMPLETE}'."
	      ${RM} -f ${filename}
	      returnValue=0
	    else
	      warning ${myName} "Unable to purge entries from '${DIR_LOG}/${LOG_COMPLETE}' (mv failed: ${?})."
	      ${RM} -f ${tmpfile}
	    fi
	  fi
	else
	  warning ${myName} "Unable to find old entries from '${filename}' in '${DIR_LOG}/${LOG_COMPLETE}'. Seek help if this condition persists."
	fi
      else
	warning ${myName} "Checksum '${checksum}' does not match file name ${filename:t}. Please find someone who knows what to do about this."
      fi
    done

  else
    warning ${myName} "Missing value for 'PODGET_AGE_THRESHOLD'. Without that value I cannot purge old entries from the podget 'done' file."
    sendNotification ${myName} "${PODGET_MAILTO}" POST_PROCESS_ERROR \
		     "Warning: Missing value for 'PODGET_AGE_THRESHOLD'. Without that value I cannot purge old entries from the podget 'done' file. Seek professional help if this condition persists."
  fi

  ${RM} -f ${doneArchive}
  trap - 0 1 2 3

  return ${returnValue}
}

# Simple file archiver with removal of archived files older than a
# month old.
archiveFile() {
  local myName=${1} ; shift
  local fileName=${1} ; shift
  local archiveLocation=${1} ; shift
  local VERBOSE=${1}

  local currentDateTime=$(strftime "%F-%H%M%S" ${EPOCHSECONDS})
  local returnValue=0;

  # Attempt to create the archive location if it does not exist.
  if ! [[ -d ${archiveLocation} ]] ; then
    if ${MKDIR} -p ${archiveLocation} ; then
      notice ${myName} "Created archive directory '${archiveLocation}' for '${fileName}'."
    else
      warning ${myName} "Unable to create directory '${archiveLocation}' for '${fileName}'. Seek professional help."
      returnValue=2
    fi
  fi

  if ${MV} ${fileName} ${archiveLocation}/${fileName:t}-${currentDateTime} ; then
    notice ${myName} "Archived '${fileName}' to '${archiveLocation}'."
  else
    warning ${myName} "Unable to move '${fileName}' to '${archiveLocation}'. You should probably clean this up."
    returnValue=3
  fi

  # Clean up old copies of archived files. We do not really care
  # whether this succeeds, but will output the name(s) of the deleted
  # files if any are found.
  if (( returnValue == 0 )) ; then
    notice ${myName} "Removing archived copies of '${fileName:t}'..."
    ${FIND} ${archiveLocation} -iname ${fileName:t}\* -mtime +31 -print -delete
    returnValue=${?}
  fi

  return ${returnValue}
}

notice() {
  local myName=${1}
  local message=${2}

  ${LOGGER} -t ${myName} -p local7.notice -i "NOTICE: ${message}"
}

warning() {
  local myName=${1}
  local message=${2}

  ${LOGGER} -t ${myName} -p local7.warn -i "WARNING: ${message}"
}

error() {
  local myName=${1}
  local message=${2}

  ${LOGGER} -t ${myName} -p local7.err -i "ERROR: ${message}"

  echo 254
  return 254
}

##############################################################################
## Script main line
##############################################################################

# The shell commands we will use in this script.
typeset -a ourCommands
ourCommands=(
  awk
  cat
  cp
  cut
  diff
  find
  getopt
  grep
  kill
  logger
  mkdir
  mktemp
  mv
  pidof
  podget
  rm
  sed
  sha256sum
  sleep
  sort
  touch
  wc
)
# Find the executables we need; this uses a little old fashioned shell and
# a ZSH trick -- the (U) in the eval(1) says to evaluate the parameter as
# all upper case letters. We will use the command names in upper case as
# variables by which to call the commands later in this function.
for C in ${ourCommands} ; do
  for D in ${path} ; do
    [[ -x ${D}/${C} ]] && { eval ${(U)C}=${D}/${C} ; break }
  done
  [[ -x $(eval echo \$${(U)C}) ]] || { echo "Cannot find ${C}! Done."; return 1 }
done

# Set some defaults, and see below for ways to override these defaults.
DIR_CONFIG=%PODGET_DIR_CONFIG%
CONFIG_CORE=podgetrc
CONFIG_NOTIFY=notifyrc

# Process command line options.
# We use the same option names and values as podget.
TEMP=$(${GETOPT} -o c:Dd:n:Vvh --long config:,debug,dir_config:,config_notify:,version,verbose,help -n "${0:t}" -- "${@}")
if (( ${?} != 0 )) ; then echo "Terminating..." >&2 ; return 1 ; fi
# Note the quotes around ${TEMP}: they are essential!
eval set -- "${TEMP}"
while : ; do
  case "${1}" in
    -D|--debu*) DEBUG=1 ; shift ;;
    -c|--config) CONFIG_CORE=${2} ; shift 2 ;;
    -d|--dir_c*) DIR_CONFIG=${2} ; shift 2 ;;
    -n|--config_n*) CONFIG_NOTIFY=${2} ; shift 2 ;;
    -h|--help*) usage ${myName} ; exit ;;
    -v|--verb*) VERBOSE=1 ; PASSFILE=none ; shift ;;
    -V|--vers*) showVersion=1 ; shift ;;
    --) shift ; break ;;
    *) echo "${0##*/}: getopt internal error!" >&2 ; return 1 ;;
  esac
done

if ((showVersion)) ; then
  echo "${0##*/}: version ${vMajor}.${vMinor}.${vPatch}-${${vHash#\$Hash: }%$}"
  exit 0
fi

# Log STDOUT and STDERR of this script and all commands called by this
# script to separate files.
exec 1> /var/tmp/${0##*/}.out
exec 2> /var/tmp/${0##*/}.err

[[ -r ${DIR_CONFIG}/${CONFIG_CORE} ]] && source ${DIR_CONFIG}/${CONFIG_CORE}
[[ -n "${CONFIG_SERVERLIST}" ]] ||
  exit $(error ${myName} "Failed to get a setting for 'CONFIG_SERVERLIST'. Does '${DIR_CONFIG}/${CONFIG_CORE}' exist?")
[[ -r ${DIR_CONFIG}/${CONFIG_NOTIFY} ]] && source ${DIR_CONFIG}/${CONFIG_NOTIFY}
[[ -n "${PODGET_RUNTIME_DATA}" ]] ||
  exit $(error ${myName} "Failed to get the setting for 'PODGET_RUNTIME_DATA'. Does '${DIR_CONFIG}/${CONFIG_NOTIFY}' exist?")

# Remember when we started running.
startTime=${EPOCHSECONDS}

# Create the log directory if it does not already exist.
[[ -d "${DIR_LOG}" ]] || ${MKDIR} ${DIR_LOG} || {
    sendNotification ${myName} "${PODGET_MAILTO}" INTERNAL_ERROR "Could not create log directory '${DIR_LOG}'. Cannot continue." ;
    exit $(error ${myName} "Could not create log directory '${DIR_LOG}'. Cannot continue.") ;
  }

##########################################################################################
## Make sure no other instances of podget are running
##########################################################################################

# Is podget running?
if podgetPIDs=( $(${PIDOF} -x podget) ) ; then

  # Figure out how long that instance has been running and kill it,
  # then notify if it has been running for too long.
  if [[ -r ${DIR_LOG}/${PODGET_RUNTIME_DATA} ]] ; then

    lastStart=$(${AWK} '/^start-time/{print $2}' ${DIR_LOG}/${PODGET_RUNTIME_DATA})

    # If lastStart is not set it gets evaluated as zero.
    if (( ( startTime - lastStart ) > PODGET_REASONABLE_RUNTIME )) ; then

      sendNotification ${myName} "${PODGET_MAILTO}" TIMEOUT "podget appears to be still running at $(strftime %T ${startTime}). Last start was at $(strftime %T ${lastStart})."

      for pid in ${podgetPIDs} ; do

	# Try to be kind in killing the process
	${KILL} -HUP ${pid}
	${SLEEP} 3
	if [[ -d /proc/${pid} ]] ; then

	  # Be a little more persistent.
	  ${KILL} ${pid}
	  ${SLEEP} 3
	  if [[ -d /proc/${pid} ]] ; then

	    # The nuclear option -- just kill it.
	    ${KILL} -9 ${pid}
	    ${SLEEP} 3
	    if [[ -d /proc/${pid} ]] ; then

	      sendNotification ${myName} "${PODGET_MAILTO}" TERMINATE "Cannot terminate wayward instance of a running podget (PID=${pid}). Aborting."
	      exit $(error ${myName} "Cannot terminate running podget. PID is ${pid}.")
	    fi
	  fi
	fi
      done

    else

      # podget is running but for less than the reasonable time. Just quit.
      updateRuntimeData ${myName} check-time ${startTime}

    fi

  else

    sendNotification ${myName} "${PODGET_MAILTO}" INTERNAL_ERROR "WHAT? podget seems to be running, but missing '${DIR_LOG}/${PODGET_RUNTIME_DATA}'. Aborting."
    exit $(error ${myName} "podget running but missing ${DIR_LOG}/${PODGET_RUNTIME_DATA}.")

  fi
else

  # Execute pre-podget-run tasks.
  preRunProcess ${myName} ${startTime} ${VERBOSE}

  updateRuntimeData ${myName} start-time ${startTime}

  # podget is not running, so go ahead and launch it.
  # Convert our "--verbose" to a "-vv" for podget, add up to two more
  # "v" to increase the verbosity of podget.
  ${PODGET} ${VERBOSE:+-vv} --dir_config ${DIR_CONFIG} --config ${CONFIG_CORE}

  if ! updateRuntimeData ${myName} start-time DELETE ; then
    sendNotification ${myName} "${PODGET_MAILTO}" INTERNAL_ERROR "Failed to clean up podget runtime data. Please look into this."
  fi

  # Execute post-podget-run tasks.
  if ! postRunProcess ${myName} ${startTime} ${VERBOSE} ; then
    sendNotification ${myName} "${PODGET_MAILTO}" INTERNAL_ERROR "Failed to complete podget post-run tasks (${?})."
  fi

  # Check the various output and log files to make sure things went well.
  if [[ -s ${DIR_LOG}/${LOG_FAIL} ]] ; then

    # It seems there was a failure, investigate further. LOG_FAIL contains one URL per line.
    failures=( $(${CAT} ${DIR_LOG}/${LOG_FAIL}) )
    for failure in ${failures} ; do

      sendNotification ${myName} "${PODGET_MAILTO}" DOWNLOAD "At $(strftime %T ${startTime}) podget failed to download the podcast at ${failure}. Please look into this and fix things (see attached log file)." ${DIR_LOG}/${LOG_FAIL}
      warning ${myName} "At $(strftime %T ${startTime}) podget failed to download the podcast at ${failure}."

    done

    # Archive the error log to prevent reporting the same errors.
    archiveFile ${myName} ${DIR_LOG}/${LOG_FAIL} ${DIR_LOG}/archive ${VERBOSE}
  fi
fi

#
# Search for files ending in upper case instances of known extnsions
# and rename them to use the lower case of that extension.
#
${FIND} ${DIR_LIBRARY} -regextype posix-extended -regex '^.*\.(MP3|FLAC|OGG|M4A)' -print | while read file ; do
  # Extract everything after the final "." and convert it to lower case.
  extension=${(L)file##*.}
  # Move (rename) the file to use its downcased-extension.
  if ${MV} ${file} ${file%.*}.${extension} ; then
    notice ${myName} "Renamed downloaded file '${file}' to '${file%.*}.${extension}'."
  else
    returnValue=${?}
    warning ${myName} "Could not rename downloaded file '${file}' to '${file%.*}.${extension}' (Error: ${returnValue})"
    sendNotification ${myName} "${PODGET_MAILTO}" RENAME "Could not rename downloaded file '${file}' to '${file%.*}.${extension}' (Error: ${returnValue})"
  fi
done

exit

# Local Variables: ***
# mode:shell-script ***
# indent-tabs-mode: f ***
# sh-indentation: 2 ***
# sh-basic-offset: 2 ***
# sh-indent-for-do: 0 ***
# sh-indent-after-do: + ***
# sh-indent-comment: t ***
# sh-indent-after-case: + ***
# sh-indent-after-done: 0 ***
# sh-indent-after-else: + ***
# sh-indent-after-if: + ***
# sh-indent-after-loop-construct: + ***
# sh-indent-after-open: + ***
# sh-indent-after-switch: + ***
# sh-indent-for-case-alt: ++ ***
# sh-indent-for-case-label: + ***
# sh-indent-for-continuation: + ***
# sh-indent-for-done: 0 ***
# sh-indent-for-else: 0 ***
# sh-indent-for-fi: 0 ***
# sh-indent-for-then: 0 ***
# End: ***
