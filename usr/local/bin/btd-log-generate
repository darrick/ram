#!/bin/zsh

##############################################################################
##############################################################################
##
## Generate logs for all Rivendell services.
##
## See also: rdlogmanager --help
##
##############################################################################
##############################################################################

zmodload zsh/datetime

# This script complies with Semantic Versioning: http://semver.org/
vMajor=0
vMinor=1
vPatch=2
vHash='$Hash$'

# Do not overwrite existing log by default (see options below).
unset FORCE

usage() {
  local myName=${1:t}

  cat <<EOF
${myName} [ --force (-f) ] [ --when (-w) <day-spec> ]
                 [ --help (-h) ] [ --version (-v) ]

$(${FMT} <<<"${myName} uses rdlogmanager(1) to generate logs for all SERVICES for 'tomorrow' (the day after the current day). On Fridays it also generates logs for all SERVICES for Sunday and Monday.")

$(${FMT} <<<"By default, ${myName} does not overwrite existing logs. You may force overwriting existing logs by calling ${myName} with the '--force' ('-f') option.")

$(${FMT} <<<"You may specify the day for which rdlogmanager(1) generates the log by calling ${myName} with the '--when' option. See 'rdlogmanager --help' for details about this option.")

$(${FMT} <<<"${myName} saves the output of rdlogmanager(1) in the Desktop folder of the calling user, and also emails the output to the addresses listed in the MAILTO shell variable.")

$(${FMT} <<<"See rdlogmanager --help for additional details.")

EOF
}

#################  BEGIN shell commands used in this script.  #################
# This script uses these 7 external commands.
# Look for them in their upper case, parameter expanded form.
ourCommands=(
  cp
  fmt
  getopt
  logger
  mktemp
  rdlogmanager
  rm
)
# Find the executables we need; this uses a little old fashioned shell and
# a ZSH trick -- the (U) in the eval(1) says to evaluate the parameter as
# all upper case letters. We will use the command names in upper case as
# variables by which to call the external commands used in this script.
for C in ${ourCommands} ; do
  for D in ${path} ; do
    [[ -x ${D}/${C} ]] && { eval ${(U)C//-/_}=${D}/${C} ; break }
  done
  [[ -x $(eval echo \$${(U)C//-/_}) ]] || { echo "Cannot find ${C}! Done."; return 1 }
done
##################  END shell commands used in this script.  ##################

## Use getopt to parse the command line arguments.
TEMP=$(${GETOPT} -o fhvw: --long force,help,version,when: -n ${0:t} -- "${@}")
if [ ${?} != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
## Note the quotes around "$TEMP": they are essential!
eval set -- "${TEMP}"
while :
do
  case "${1}" in
    -f|--forc) FORCE=1 ; shift ;;
    -h|--help) usage ${0} ; exit ;;
    -v|--ver*) showVersion=1 ; shift ;;
    -w|--when) WHEN=${2} ; shift 2 ;;
    --) shift ; break ;;
    *) echo 'Internal error!' ; exit 1 ;;
  esac
done
unset TEMP

if ((showVersion)) ; then
  echo "${0##*/}: version ${vMajor}.${vMinor}.${vPatch}-${${vHash#\$Hash: }%$}"
  exit 0
fi

if [[ -r /usr/local/bin/zsh-functions ]] ; then
    source /usr/local/bin/zsh-functions
else
    ${LOGGER} --stderr -t ${0##*/} -p local7.err -i "ERROR: Cannot continue without /usr/local/bin/zsh-functions! (Error: ${?})"
fi

MAILTO="dklann@broadcasttool.com"

# Gather all the services from Rivendell.
services=( $(doSQL "SELECT name FROM SERVICES") )

outputFile=$(${MKTEMP})

trap "${RM} -f ${outputFile} ; exit ;" 0 1 2 3

# Get the current weekday name in full (%A) (but permit setting it in
# the calling environment for testing).
today=${TODAY:-$(strftime "%A" ${EPOCHSECONDS})}

# For each service found:
# Generate a log (-g) for tomorrow
#   do not overwrite existing log unless we are called with --force (-P)
#   service: (e.g.: "Production") (-s)
#   merge traffic (-t)
#   merge music (-m)
#   day-spec (-d) is "tomorrow" (0) unless ${WHEN} is specified
for service in ${services} ; do
    ${RDLOGMANAGER} ${${FORCE:-"-P"}:+} -s ${service} -g -t -m -d ${WHEN:-0} 2>&1

    # Also create logs for Sunday and Monday if ${today} is 'Friday'.
    if [[ ${today} == Friday ]] ; then
	${RDLOGMANAGER} ${${FORCE:-"-P"}:+} -s ${service} -g -t -m -d 1 2>&1
	${RDLOGMANAGER} ${${FORCE:-"-P"}:+} -s ${service} -g -t -m -d 2 2>&1
    fi
done > ${outputFile}

# Save a copy in the user's Desktop folder if such a folder exists.
if [[ -d ${HOME}/Desktop ]] ; then
  ${CP} ${outputFile} ${HOME}/Desktop/RD-Log-Generate.txt
fi

# Send email to the addresses in $MAILTO with the same output as is on
# the desktop.
if [[ -s ${outputFile} ]] ; then
  sendNotification ${0:t} ${MAILTO} LOG-GENERATE "Rivendell Logs have been generated." ${outputFile}
else
  sendNotification ${0:t} ${MAILTO} LOG-GENERATE "rdlogmanager(1) created no output. Did it run? Better check on it."
fi

exit
