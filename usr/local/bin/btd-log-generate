#!/bin/zsh

##############################################################################
##############################################################################
##
## Generate Logs for all Rivendell services.
##
## See also: rdlogmanager --help
##
##############################################################################
##############################################################################

zmodload zsh/datetime

# This script complies with Semantic Versioning: http://semver.org/
vMajor=0
vMinor=2
vPatch=1
vHash='$Hash$'

# Do not overwrite existing log by default (see options below).
unset FORCE

# Default number of days for which to generate Logs.
DAYS=1

usage() {
  local myName=${1:t}

  cat <<EOF
${myName} [ --force (-f) ] [ --days <number-of-days> ] [ --start (-s) <date> ] [ --end (-e) <date> ]
                 [ --help (-h) ] [ --version (-v) ]

$(${FMT} <<<"${myName} uses rdlogmanager(1) to generate Logs for all SERVICES. With no optional arguments, ${myName} generates Logs for 'tomorrow' (the day after the current day). Also with no optional arguments, on Fridays ${myName} generates Logs for all SERVICES for Saturday, Sunday and Monday.")

$(${FMT} <<<"By default, ${myName} does not overwrite existing Logs. You may force overwriting existing Logs by calling ${myName} with the '--force' ('-f') option.")

$(${FMT} <<<"You may specify a range of days for which rdlogmanager(1) should generate Logs by calling ${myName} with the '--start' and '--end' options and specifying the date in YYYY-MM-DD format. Specifying '--end' without '--start' assumes 'tomorrow' as the starting day. Specifying '--start' without '--end' means 'generate a Log just for that day'. Specifying neither '--start' nor '--end' causes ${myName} to generate Logs for 'tomorrow' (see above).")

$(${FMT} <<<"Alternatively, you may instruct ${myName} to generate a specific number of days of Logs with the --days <D> option. The starting day in this case is 'tomorrow'.")

$(${FMT} <<<"${myName} saves the output of rdlogmanager(1) in the Desktop folder of the invoking user, and also emails the output to the addresses listed in the MAILTO shell variable.")

$(${FMT} <<<"See rdlogmanager(1) and 'rdlogmanager --help' for additional details.")

EOF
}

#################  BEGIN shell commands used in this script.  #################
# This script uses these 7 external commands.
# Look for them in their upper case, parameter expanded form.
ourCommands=(
  cp
  fmt
  getopt
  logger
  mktemp
  rdlogmanager
  rm
)
# Find the executables we need; this uses a little old fashioned shell and
# a ZSH trick -- the (U) in the eval(1) says to evaluate the parameter as
# all upper case letters. We will use the command names in upper case as
# variables by which to call the external commands used in this script.
for C in ${ourCommands} ; do
  for D in ${path} ; do
    [[ -x ${D}/${C} ]] && { eval ${(U)C//-/_}=${D}/${C} ; break }
  done
  [[ -x $(eval echo \$${(U)C//-/_}) ]] || { echo "Cannot find ${C}! Done."; return 1 }
done
##################  END shell commands used in this script.  ##################

## Use getopt to parse the command line arguments.
TEMP=$(${GETOPT} -o d:e:fhs:v --long days:,force,help,version,start:,end: -n ${0:t} -- "${@}")
if [ ${?} != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
## Note the quotes around "$TEMP": they are essential!
eval set -- "${TEMP}"
while :
do
  case "${1}" in
    -d|--day*) DAYS=${2} ; shift ;;
    -f|--forc*) FORCE=1 ; shift ;;
    -h|--help) usage ${0} ; exit ;;
    -v|--vers*) showVersion=1 ; shift ;;
    -s|--start) START_DATE=${2} ; shift 2 ;;
    -e|--end) END_DATE=${2} ; shift 2 ;;
    --) shift ; break ;;
    *) echo 'Internal error!' ; exit 1 ;;
  esac
done
unset TEMP

if ((showVersion)) ; then
  echo "${0##*/}: version ${vMajor}.${vMinor}.${vPatch}-${${vHash#\$Hash: }%$}"
  exit 0
fi

exec 1> /var/tmp/${0:t}.out
exec 2> /var/tmp/${0:t}.err

rightNow=${EPOCHSECONDS}

if [[ -r /usr/local/bin/zsh-functions ]] ; then
    source /usr/local/bin/zsh-functions
else
    ${LOGGER} --stderr -t ${0##*/} -p local7.err -i "ERROR: Cannot continue without /usr/local/bin/zsh-functions! (Error: ${?})"
    exit 3
fi

MAILTO=${MAILTO:-"dklann@grunch.org"}
oneDay=$(( 60 * 60 * 24))

# Gather all the services from Rivendell.
typeset -a services
services=( $(doSQL "SELECT name FROM SERVICES") )

outputFile=$(${MKTEMP})

trap "${RM} -f ${outputFile} ; exit ;" 0 1 2 3

# Get the current full weekday name (%A) (but permit setting it in
# the calling environment for testing).
today=${TODAY:-$(strftime "%A" ${rightNow})}

# With no command line options, Logs are generated for tomorrow.
tomorrowYYYYMMDD=$(strftime "%F" $(( rightNow + oneDay )))
tomorrowSeconds=$(strftime -r "%F" ${tomorrowYYYYMMDD})

# Set the start date to tomorrow if not specified on the command line.
if [[ -n "${START_DATE}" ]] ; then
    if ! [[ ${START_DATE} =~ '[[:digit:]]{4}(-[[:digit:]]{2}){2}' ]] ; then
        ${LOGGER} --stderr -t ${0##*/} -p local7.err -i "ERROR: Cannot make sense of Start Date '${START_DATE}'. I quit."
        exit
    fi
    startDateSeconds=$(strftime -r "%F" ${START_DATE})
else
    startDateSeconds=${tomorrowSeconds}
fi

# Set the end date to the same as the start date if not specified on
# the command line.
if [[ -n "${END_DATE}" ]] ; then
    if ! [[ ${END_DATE} =~ '[[:digit:]]{4}(-[[:digit:]]{2}){2}' ]] ; then
        ${LOGGER} --stderr -t ${0##*/} -p local7.err -i "ERROR: Cannot make sense of End Date '${END_DATE}'. I quit."
        exit
    fi
    endDateSeconds=$(strftime -r "%F" ${END_DATE})
else
    endDateSeconds=${startDateSeconds}
fi

# Same thing if number of days was specified on the command line.
if ((DAYS > 1)) ; then
    endDateSeconds=$((startDateSeconds + (oneDay * DAYS)))
fi

# For each day offset and for each service found:
# Generate a Log (-g) for tomorrow or the specific (set of) day(s).
#   do not overwrite existing Log unless we are called with --force (-P)
#   service: (e.g.: "Production") (-s)
#   merge traffic (-t)
#   merge music (-m)
#   day-spec (-d) is "tomorrow" (0) unless ${START_DATE} is specified
startDayOffset=$(( ( startDateSeconds - tomorrowSeconds - oneDay ) / oneDay ))
endDayOffset=$(( ( endDateSeconds - tomorrowSeconds - oneDay ) / oneDay ))

for (( dayOffset = startDayOffset + 1; dayOffset <= ( endDayOffset + 1 ); dayOffset++ )) ; do
    for service in ${services} ; do
        ${RDLOGMANAGER} ${${FORCE:-'-P'}:+} -s ${service} -g -t -m -d ${dayOffset} 2>&1

        # Also create Logs for Sunday and Monday if ${today} is
        # 'Friday' and we do not have an End Date.
        if [[ ${today} == Friday ]] && [[ -z "${END_DATE}" ]] ; then
            ${RDLOGMANAGER} ${${FORCE:-'-P'}:+} -s ${service} -g -t -m -d 1 2>&1
            ${RDLOGMANAGER} ${${FORCE:-'-P'}:+} -s ${service} -g -t -m -d 2 2>&1
        fi
    done
done > ${outputFile}

# Save a copy in the user's Desktop folder if such a folder exists.
if [[ -d ${HOME}/Desktop ]] ; then
  ${CP} ${outputFile} ${HOME}/Desktop/RD-Log-Generate.txt
fi

# Send email to the addresses in $MAILTO with the same output as is on
# the desktop.
if [[ -s ${outputFile} ]] ; then
  sendNotification ${0:t} ${MAILTO} LOG-GENERATE "Rivendell Logs have been generated." ${outputFile}
else
  sendNotification ${0:t} ${MAILTO} LOG-GENERATE "rdlogmanager(1) created no output. Did it run? Better check on it."
fi

exit

# Local Variables: ***
# mode:shell-script ***
# indent-tabs-mode: f ***
# sh-indentation: 2 ***
# sh-basic-offset: 2 ***
# sh-indent-for-do: 0 ***
# sh-indent-after-do: + ***
# sh-indent-comment: t ***
# sh-indent-after-case: + ***
# sh-indent-after-done: 0 ***
# sh-indent-after-else: + ***
# sh-indent-after-if: + ***
# sh-indent-after-loop-construct: + ***
# sh-indent-after-open: + ***
# sh-indent-after-switch: + ***
# sh-indent-for-case-alt: ++ ***
# sh-indent-for-case-label: + ***
# sh-indent-for-continuation: + ***
# sh-indent-for-done: 0 ***
# sh-indent-for-else: 0 ***
# sh-indent-for-fi: 0 ***
# sh-indent-for-then: 0 ***
# End: ***
