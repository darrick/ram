#!/usr/bin/perl -w

use lib qw{/home/dklann/perl5/lib/perl5};

use strict;

use URI::Escape;
use Data::Dumper;

package Feed;

use URI::Escape;
use Data::Dumper;

# Define the data here because ... it's just easier.
my $feeds = {
    'RedDirtMusicRadio' => {
	'feedTitle'        => 'Red Dirt Music Radio',
	'feedDescription'  => 'Red Dirt Music Radio Segments',
	'remotePROTO'      => 'ftp',
	'remoteHOST'       => 'ftp.radioidl.com',
	'remoteUSER'       => 'rdmrcom',
	'remotePASS'       => 'R@dio2435',
	'remoteDIR'        => '/',
	'longListFormat'   => {
	    'mode'     => 0,
	    'links'    => 1,
	    'owner'    => 2,
	    'group'    => 3,
	    'size'     => 4,
	    'mon'      => 5,
	    'mday'     => 6,
	    'hhmm'     => 7,
	    'filename' => 8,
	},
	# The minimum number of files we expect to exist on the remote server
	# (this is a total crap-shoot, and is merely a sanity check).
	'minimumFileCount' => 4,
	# Where we will put the RSS XML data.
	'outputFile'       => '/var/www/grunch.org/htdocs/rss/rdmr.xml',
    },
    'UnderCurrents' => {
	'feedTitle'        => 'UnderCurrents',
	'feedDescription'  => 'UnderCurrents 1-hour segments',
	'remotePROTO'      => 'ftp',
	'remoteHOST'       => 'ftp.nativeftp.org',
	'remoteUSER'       => 'undercurrents@nativeftp.org',
	'remotePASS'       => 'undercurrents@nativeftp.org',
	'remoteDIR'        => 'UnderCurrents',
	'longListFormat'   => {
	    'mode'     => 0,
	    'links'    => 1,
	    'owner'    => 2,
	    'group'    => 3,
	    'size'     => 4,
	    'mon'      => 5,
	    'mday'     => 6,
	    'hhmm'     => 7,
	    'filename' => 8,
	},
	'minimumFileCount' => 20,
	'outputFile'       => '/var/www/grunch.org/htdocs/rss/uc.xml',
    },
};

sub new {
    my( $proto ) = shift;
    my( %parms ) = @_;

    my( $class ) = ref( $proto ) || $proto;

    bless( { feedList => $feeds, %parms }, $class );
}

sub DESTROY( $ ) {
    my $self = shift;
}

sub feedName( $$ ) {
    my $self = shift;
    my $feedName = shift;

    $self->{feedList}->{$feedName};
}

# Return the URL for the feeName.
sub feedURL( $$ ) {
    my $self = shift;
    my $feedName = shift;

    my $url = $self->{feedList}->{$feedName}->{remotePROTO} . '://' .
	$self->{feedList}->{$feedName}->{remoteHOST} . '/' .
	$self->{feedList}->{$feedName}->{remoteDIR} . '/';

    $url;
}

# Return the username for the feeName.
sub feedUser( $$ ) {
    my $self = shift;
    my $feedName = shift;

    $self->{feedList}->{$feedName}->{remoteUSER};
}

# Return the password for the feeName.
sub feedPass( $$ ) {
    my $self = shift;
    my $feedName = shift;

    $self->{feedList}->{$feedName}->{remotePASS};
}

# Return the output filename for the feedName.
sub outputFile( $$ ) {
    my $self = shift;
    my $feedName = shift;

    $self->{feedList}->{$feedName}->{outputFile};
}

# Return the file name from a single entry in a long listing.
sub getFilename( $$$ ) {
    my $self = shift;
    my $feedName = shift;
    my $fileListing = shift;

    my @fileListing = split( ' ', $fileListing );

    @fileListing[$self->{feedList}->{$feedName}->{longListFormat}->{filename}];
}

sub getPubDate( $$$ ) {
    my $self = shift;
    my $feedName = shift;
    my $fileListing = shift;

    my @fileListing = split( ' ', $fileListing );

    @fileListing[$self->{feedList}->{$feedName}->{longListFormat}->{mon}] . " " .
	@fileListing[$self->{feedList}->{$feedName}->{longListFormat}->{mday}] . " " .
	@fileListing[$self->{feedList}->{$feedName}->{longListFormat}->{hhmm}];
}

sub getSize( $$$ ) {
    my $self = shift;
    my $feedName = shift;
    my $fileListing = shift;

    my @fileListing = split( ' ', $fileListing );
    $fileListing[$self->{feedList}->{$feedName}->{longListFormat}->{size}];
}

sub listFeeds( $ ) {
    my $self = shift;

    # @feeds is a Package-scope array
    for my $feed ( sort ( keys ( %$feeds ))) {
	say STDOUT $feed, " (", $feeds->{$feed}->{feedDescription}, ")";
    }
}

sub getFileListingForFeed( $$ ) {
    my $self = shift;
    my $feedName = shift;

    my @fileList = ();
    my $feedURL = $self->feedURL( $feedName );
    my $feedUser = $self->feedUser( $feedName );
    my $feedPass = $self->feedPass( $feedName );
    my $curlCommand =
	qq(curl --silent --user) . q( ) .
	qq($feedUser:$feedPass) . q( ) .
	qq("$feedURL");

    say STDERR $curlCommand if ( $self->{verbose} );

    @fileList = qx($curlCommand);

    chomp( @fileList );

    \@fileList;
}

package main;

use autodie;
use English;

use Getopt::Long;
use Pod::Usage;

use Time::localtime qw(localtime);

sub createXML( $$$$ );
sub main();

main;

1;

sub createXML( $$$$ ) {
    my $feeds = shift;
    my $feedName = shift;
    my $files = shift;
    my $verbose = shift;

    my $feed = $feeds->feedName( $feedName );

    my $xml = undef;

    # make the header
    $xml = <<END;
<?xml version="1.0" encoding="iso8859-1" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
  <title>$feed->{feedTitle}</title>
  <link>http://grunch.org</link>
  <description>$feed->{feedDescription}</description>
 </channel>
END


    # make each entry
    foreach my $file ( @$files ) {
        next unless ( $file =~ /\.mp3$/ );
	my $fullURL = $feeds->feedURL( $feedName ) . uri_escape( $feeds->getFilename( $feedName, $file ));
	my $rawFileName = $feeds->getFilename( $feedName, $file );
	my $length = $feeds->getSize( $feedName, $file );
	my $pubDate = $feeds->getPubDate( $feedName, $file );

	$xml .= <<END;
 <item>
   <title>$feed->{feedTitle} - Show $rawFileName</title>
   <link></link>
   <description>$feed->{feedDescription}</description>
   <pubDate>$pubDate</pubDate>
   <enclosure url="$fullURL" length="$length" type="audio/mpeg" />
 </item>
END
    }

    # close it out
    $xml .= "</rss>\n";

    say STDERR $xml if ( $verbose );

    $xml;
}

sub main() {
    my( $list, $verbose, $man, $help ) = ( undef, 0, undef, undef );
    my( $now ) = localtime();
    my( $year ) = ( undef );
    my( $feedName, $feed ) = ( undef, undef );

    GetOptions(
	'list|l'   => \$list,
        'help|?|h' => \$help,
        'man|m' => \$man,
        'verbose|v+' => \$verbose,
        ) || pod2usage( 2 );

    pod2usage( -verbose => 0, -output  => \*STDERR ) if $help;
    pod2usage( -verbose => 2, -output  => \*STDERR ) if $man;

    $feedName = shift( @ARGV );

    pod2usage( 1 ) unless ( $feedName || $list );

    my( $feeds ) = new Feed( verbose => $verbose, );

    if ( $list ) {
	$feeds->listFeeds();
    } else {
	$feed = $feeds->feedName( $feedName );
	my $files = $feeds->getFileListingForFeed( $feedName );
	say STDERR map {
	    $feed->{remoteDIR} . '/' . $feeds->getFilename( $feedName, $_ ) . "\n"
	} @$files if ( $verbose > 1 );

	open my $feedFH, ">", $feeds->outputFile( $feedName ) ||
	    die "Cannot open $feeds->outputFile( $feedName ) for writing ($?). Stopped";
	print $feedFH createXML( $feeds, $feedName, $files, $verbose );
	close $feedFH;
    }
}

1;

__END__;

=head1 NAME

btd-ftp-to-rss - Retrieve a list of files on an FTP server and create a (somewhat) proper XML to be consumed by RSS feed readers.

=head1 SYNOPSIS

btd-ftp-to-rss [ -m ] [ -h ] [ -v ] <feed-name> (or --list (-l))

 Options:
 --list (-l)          list all known FTP sites
 --help (-h)          show a brief help message
 --man (-m)           display the full documentation for this command
 --verbose (-v)       run in 'verbose' mode

=head1 OPTIONS

=over 8

=item B<--help (h)>

Print a brief help message and exit.

=item B<--man (m)>

Print the manual page and exit.

=item B<--verbose (v)>

Run in verbose mode. Use multiple times for more verbosity.

=back

=head1 DESCRIPTION

B<btd-ftp-to-rss> creates an XML file suitable for advertising as an RSS feed for consumption of a podcast retrieval app such as podget(1).

=head1 SEE ALSO

=item B<podget(1)>

=back
