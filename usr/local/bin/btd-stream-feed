#!/bin/zsh

##############################################################################
##
## btd-stream-feed
## start a liquidsoap process connected to a running instance of JACK
## arguments: Liquidsoap-script-path Stream-URL
##
##############################################################################

# Log STDOUT and STDERR to separate files.
exec 1> /var/tmp/${0##*/}.out
exec 2> /var/tmp/${0##*/}.err

#################  BEGIN shell commands used in this script.  #################
# This script uses these 8 external commands.
# Look for them in their upper case, parameter expanded form.
ourCommands=(
  cut
  fgrep
  grep
  jack_connect
  jack_lsp
  liquidsoap
  logger
  tail
)
# Find the executables we need; this uses a little old fashioned shell and
# a ZSH trick -- the (U) in the eval(1) says to evaluate the parameter as
# all upper case letters. We will use the command names in upper case as
# variables by which to call the external commands used in this script.
for C in ${ourCommands} ; do
  for D in ${path} ; do
    [[ -x ${D}/${C} ]] && { eval ${(U)C//-/_}=${D}/${C} ; break }
  done
  [[ -x $(eval echo \$${(U)C//-/_}) ]] || { echo "Cannot find ${C}! Done."; return 1 }
done
##################  END shell commands used in this script.  ##################

##
## the liquidsoap script to use for this instance of the stream
##
streamScript=${1:-${STREAM_SCRIPT:-${ROOT:-/}usr/local/etc/btd/btd-stream-feed.liq}}

##
## the stream URL should be of the form
## http://source:<PASSWORD>@<HOSTNAME-OR-IP-ADDRESS>:<PORT>/<MOUNTPOINT>
##
streamURL=${2:?"What stream URL?"}

## Get zsh functions necessary for this script.
[[ -r ${ROOT:-/}usr/local/bin/zsh-functions ]] && source ${ROOT:-/}usr/local/bin/zsh-functions

sleepDuration=${SLEEP_DURATION:-5}
maxAttempts=${MAX_ATTEMPTS:-5}

## parse the pieces out of the stream URL
streamProtocol=${streamURL%%:*}
streamUser=${${streamURL#*://}%%:*}
streamPassword=${${streamURL#*://*:}%%@*}
streamHost=${${streamURL#*@}%%:*}
streamPort=${${streamURL##*:}%/*}
streamMountPoint=${streamURL##*/}

## The default Rivendell production playback port (we tack on the "L"
## and "R" when we connect the ports below).
rivendellPlaybackPort=${RIVENDELL_STREAM_PORT:-"rivendell_0:playout_0"}

if [[ -r ${streamScript} ]] ; then

    ## snag the encoder jack client name from the script
    ## BUG ALERT: this completely depends on the formatting of the "input.jack" lines in that script!
    ## default to the BTD standard: "encode-in"
    encoderID=$(${FGREP} -A 1 "input.jack" ${streamScript} | ${TAIL} -n 1 | ${CUT} -d'"' -f2)
    encoderID=${encoderID:-"encode-in"}

    if ${LIQUIDSOAP} --daemon ${streamScript} -- ${streamProtocol} ${streamHost} ${streamPort} ${streamMountPoint} "${streamPassword}" ; then
	${LOGGER} -t ${0##*/} -p local7.info -i "INFO: Started ${streamScript} in liquidsoap."

	count=1
	while (( count <= maxAttempts )) ; do
	    if ${JACK_LSP} | ${GREP} -q encode-in ; then
		if ${JACK_LSP} | ${GREP} -q ${rivendellPlaybackPort} ; then
		    ${JACK_CONNECT} ${encoderID}:in_0 ${rivendellPlaybackPort}L
		    ${JACK_CONNECT} ${encoderID}:in_1 ${rivendellPlaybackPort}R
		    ${LOGGER} -t ${0##*/} -p local7.info -i "INFO: Connected liquidsoap ports to ${rivendellPlaybackPort}."
		    break
		fi
	    fi
	    (( count++ ))
	    sleep ${sleepDuration}
	done

	if (( count >= maxAttempts )) ; then
	    ${LOGGER} --stderr -t ${0##*/} -p local7.err -i "ERROR: Cannot see liquidsoap ports. Liquidsoap appears to be not running."
	fi
    else
	${LOGGER} --stderr -t ${0##*/} -p local7.err -i "ERROR: unable to properly start liquidsoap. Check the configuration and log files."
    fi
else
    ${LOGGER} --stderr -t ${0##*/} -p local7.err -i "ERROR: Cannot read liquidsoap script ${streamScript}."
fi

exit

# Local Variables: ***
# mode:shell-script ***
# indent-tabs-mode: f ***
# sh-indentation: 2 ***
# sh-basic-offset: 2 ***
# sh-indent-for-do: 0 ***
# sh-indent-after-do: + ***
# sh-indent-comment: t ***
# sh-indent-after-case: + ***
# sh-indent-after-done: 0 ***
# sh-indent-after-else: + ***
# sh-indent-after-if: + ***
# sh-indent-after-loop-construct: + ***
# sh-indent-after-open: + ***
# sh-indent-after-switch: + ***
# sh-indent-for-case-alt: ++ ***
# sh-indent-for-case-label: + ***
# sh-indent-for-continuation: + ***
# sh-indent-for-done: 0 ***
# sh-indent-for-else: 0 ***
# sh-indent-for-fi: 0 ***
# sh-indent-for-then: 0 ***
# End: ***
