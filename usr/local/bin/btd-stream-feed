#!/bin/zsh
# shellcheck shell=bash disable=SC2016,SC2154,SC2162
# SC2016: The single quotes are inside a double-quoted string
# SC2154: I know about all the referenced but not assigned variables
# SC2162: I do not care about read and its backslashes

##############################################################################
##
## btd-stream-feed
## start a liquidsoap process connected to a running instance of JACK
## arguments: Liquidsoap-script-path Stream-URL
##
##############################################################################

# Log STDOUT and STDERR to separate files.
exec 1> "/var/tmp/${0:t}.out"
exec 2> "/var/tmp/${0:t}.err"

((VERBOSE)) && setopt xtrace

############# BEGIN external shell commands used in this script. #############
# This script uses these 7 external commands.
# Look for them in their upper case, parameter expanded form.
typeset -a our_commands
our_commands=( cut grep jack_connect jack_lsp liquidsoap logger tail )
# Find the executables we need; this uses some basic shell and a ZSH trick:
# the (U) in the eval says to evaluate the parameter as all upper case
# letters. This snippet generates shell parameters representing the upper case
# equivalent of the command names and sets the parameter values to the full path
# of the commands.
# Refresh this segment in Emacs by marking the appropriate region (or the whole
# buffer with C-xH) and replacing it with C-uM-|mk-ourCommands (shell-command-on-region).
for C in ${our_commands[*]} ; do
  for D in ${path} ; do
    # shellcheck disable=SC2140,SC2086 # we need the quotes
    [[ -x "${D}/${C}" ]] && { eval "${(U)C//-/_}"="${D}/${C}" ; break ; }
  done
  [[ -x $(eval print \$"${(U)C//-/_}") ]] || { print "Cannot find ${C}! Done."; return 1 ; }
done
unset our_commands
############## END external shell commands used in this script. ##############

##
## The liquidsoap script to use for this instance of the stream.
##
streamScript=${1:-${STREAM_SCRIPT:-${ROOT:-/}usr/local/etc/btd/btd-stream-feed.liq}}

##
## The stream URL should be of the form
## http://USERNAME:<PASSWORD>@<HOSTNAME-OR-IP-ADDRESS>:<PORT>/<MOUNTPOINT>
## where USERNAME is most likely "source".
##
streamURL=${2:?"What stream URL?"}

## Get zsh functions necessary for this script.
# SC1090: don't care about not being able to follow the path to zsh-functions
# shellcheck disable=SC1090
[[ -r "${ROOT:-/}usr/local/bin/zsh-functions" ]] && source "${ROOT:-/}usr/local/bin/zsh-functions"

sleepDuration=${SLEEP_DURATION:-5}
maxAttempts=${MAX_ATTEMPTS:-5}

## Parse the pieces out of the stream URL.
streamProtocol=${streamURL%%:*}
streamUser=${${streamURL#*://}%%:*}
streamPassword=${${streamURL#*://*:}%%@*}
streamHost=${${streamURL#*@}%%:*}
streamPort=${${streamURL##*:}%/*}
streamMountPoint=${streamURL##*/}

## NOTICE: You MUST edit this or pass the JACK source port basename
##         in the shell environment parameter JACK_SOURCE_PORT!
## The default source port (we tack on the suffix when we connect the
## ports).
##jackSourcePort=${JACK_SOURCE_PORT:-"rivendell_0:playout_0"}
##jackSourcePort=${JACK_SOURCE_PORT:-"calf:multibandlimiter_out"}
jackSourcePort=${JACK_SOURCE_PORT:-"calf:multibandlimiter Out"}
case "${jackSourcePort}" in
  rivendell*) portSuffix=( "L" "R" ) ;;
  ##calf*) portSuffix=( "_l" "_r" ) ;;
  calf*) portSuffix=( " #1" " #2" ) ;;
  *) portSuffix=( "_0" "_1" ) ;;
esac

if [[ -r "${streamScript}" ]] ; then

    ## Snag the encoder JACK client name from the script and the mount
    ## point.
    ## BUG ALERT: this completely depends on the formatting of the
    ## "input.jack" lines in that script!
    ## Default to the BTD standard, "encode" if we are unable to
    ## discern it from the liquidsoap script.
    encoderPrefixName=$(${GREP} -F -A 1 "input.jack" "${streamScript}" | ${TAIL} -n 1 | ${CUT} -d'"' -f2)
    encoderPrefixName=${encoderID:-"encode"}
    encoderID="${encoderPrefixName}-${streamMountPoint}"

    if ${LIQUIDSOAP} --daemon "${streamScript}" -- "${streamProtocol}" "${streamHost}" "${streamPort}" "${streamMountPoint}" "${streamUser}" "${streamPassword}" ; then
	${LOGGER} -t "${0:t}" -p local7.info -i "INFO: Started ${streamScript} in liquidsoap."

	typeset -i count=1
	while ((count <= maxAttempts)) ; do
	    if ${JACK_LSP} | ${GREP} -q "${encoderID}" ; then
		if ${JACK_LSP} | ${GREP} -q "${jackSourcePort}" ; then
		    ${JACK_CONNECT} "${encoderID}:in_0" "${jackSourcePort}${portSuffix[1]}"
		    ${JACK_CONNECT} "${encoderID}:in_1" "${jackSourcePort}${portSuffix[2]}"
		    ${LOGGER} -t "${0:t}" -p local7.info -i "INFO: Connected liquidsoap ports to ${jackSourcePort}."
		    break
		fi
	    fi
	    ((count++))
	    sleep "${sleepDuration}"
	done

	if ((count >= maxAttempts)) ; then
	    ${LOGGER} --stderr -t "${0:t}" local7.err -i "ERROR: Cannot see liquidsoap ports. Liquidsoap appears to be not running."
	fi
    else
	${LOGGER} --stderr -t "${0:t/}" -p local7.err -i "ERROR: unable to properly start liquidsoap. Check the configuration and log files."
    fi
else
    ${LOGGER} --stderr -t "${0:t}" -p local7.err -i "ERROR: Cannot read liquidsoap script ${streamScript}."
fi

exit

# Local Variables: ***
# mode:shell-script ***
# indent-tabs-mode: f ***
# sh-indentation: 2 ***
# sh-basic-offset: 2 ***
# sh-indent-for-do: 0 ***
# sh-indent-after-do: + ***
# sh-indent-comment: t ***
# sh-indent-after-case: + ***
# sh-indent-after-done: 0 ***
# sh-indent-after-else: + ***
# sh-indent-after-if: + ***
# sh-indent-after-loop-construct: + ***
# sh-indent-after-open: + ***
# sh-indent-after-switch: + ***
# sh-indent-for-case-alt: ++ ***
# sh-indent-for-case-label: + ***
# sh-indent-for-continuation: + ***
# sh-indent-for-done: 0 ***
# sh-indent-for-else: 0 ***
# sh-indent-for-fi: 0 ***
# sh-indent-for-then: 0 ***
# End: ***
