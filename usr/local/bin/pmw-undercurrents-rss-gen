#!/bin/zsh

zmodload zsh/datetime

# UnderCurrents access details.
UCSITE='ftp.nativeftp.org'
UCUSER='undercurrents@nativeftp.org'
UCPASS='undercurrents@nativeftp.org'
UCDIR='UnderCurrents'

# Where we will put the RSS XML data.
tempXMLfile=$(mktemp)
XMLfile=${XML_FILE:-${ROOT:-/}var/www/grunch.org/htdocs/rss/uc.xml}

trap "rm -f ${tempXMLfile} ; exit" 0 1 2 3

# This is the minimum number of files we expect to exist on the NV1
# FTP server (it is a total crap-shoot).
minimumFileCount=${MINIMUM_FILE_COUNT:-20}

year=${YEAR:-$(strftime %Y ${EPOCHSECONDS})}
typeset -Z 2 day

# Get the current list of files from the FTP server.
currentList=$(ncftpls -u ${UCUSER} -p ${UCPASS} -l ftp://${UCSITE}/${UCDIR} | awk '/UC[[:digit:]]{4}[a-d]\.mp3$/{print $5 " " $6 " " $7 " " $8 " " $9}')

if (( $(wc -l <<< ${currentList}) > ${minimumFileCount} )) ; then

    # Everything inside the parentheses contributes to generating the XML file.
    (

	cat <<EOF
<?xml version="1.0" encoding="iso8859-1" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
  <title>UnderCurrents</title>
  <link>http://grunch.org</link>
  <description>Undercurrents</description>
 </channel>
EOF

	while read length month day hhmm filename ; do
	    echo "
 <item>
   <title>UnderCurrents Show ${filename%.mp3}</title>
   <link>ftp://ftp://ftp.nativeftp.org/UnderCurrents/</link>
   <description>Undercurrents ${filename}</description>
   <pubDate>${month} ${day} ${year} ${hhmm}</pubDate>
   <enclosure url='ftp://ftp.nativeftp.org/UnderCurrents/${filename}' length='${length}' type='audio/mpeg' />
 </item>"
	done <<< ${currentList}

	echo '</rss>'

    ) > ${tempXMLfile}

    # Move it into place, removing the previous file.
    mv ${tempXMLfile} ${XMLfile}
    chmod 644 ${XMLfile}

else

    logger --stderr  -t ${0##*/} -p local7.warn -i "WARNING: It seems like there might be an issue retrieving files from ${UCSITE}. Check it and make sure things are OK."

fi

exit

# Local Variables: ***
# mode:shell-script ***
# indent-tabs-mode: f ***
# sh-indentation: 2 ***
# sh-basic-offset: 2 ***
# sh-indent-for-do: 0 ***
# sh-indent-after-do: + ***
# sh-indent-comment: t ***
# sh-indent-after-case: + ***
# sh-indent-after-done: 0 ***
# sh-indent-after-else: + ***
# sh-indent-after-if: + ***
# sh-indent-after-loop-construct: + ***
# sh-indent-after-open: + ***
# sh-indent-after-switch: + ***
# sh-indent-for-case-alt: + ***
# sh-indent-for-case-label: + ***
# sh-indent-for-continuation: + ***
# sh-indent-for-done: 0 ***
# sh-indent-for-else: 0 ***
# sh-indent-for-fi: 0 ***
# sh-indent-for-then: 0 ***
# End: ***
