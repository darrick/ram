#!/bin/zsh

##############################################################################
##############################################################################
##
## btd-clock-report - Display the events for the named Rivendell Clock on
##                    stdout.
##
## Requires a Clock name as the sole argument on the command line.
##
##############################################################################
##############################################################################

setopt REMATCH_PCRE
setopt NO_CASE_MATCH
zmodload zsh/regex
zmodload zsh/datetime
zmodload zsh/terminfo
zmodload zsh/stat
autoload colors
colors

# This script complies with Semantic Versioning: http://semver.org/
vMajor=0
vMinor=1
vPatch=2
vHash='$Hash$'

##############################################################################
## Locally defined subroutines
##############################################################################

# How to use this command.
usage() {
  local myName=${1}

  ${CAT} << EOF
$(${FMT} <<<"${myName}: display events for the named Rivendell Clock (or all Clocks) on STDOUT (aka, the terminal)")

Summary
${myName##*/} [ --version (-V) ] --all || <Clock_Name> || "list"

Description
$(${FMT} <<<"${myName} formats and dumps the contents of the named Clock. Use the word 'list' to see a list of Clock names.")

$(${FMT} <<<"The --all option causes ${myName} to display all Rivendell Clocks to STDOUT.")
$(${FMT} <<<"Use the --html output to cause ${myName} to display the output suitable for viewing with your favorite web browser.")

$(${FMT} <<<"The --verbose option enables more chattiness in the operation. ${myName} sends diagnostic output to the standard error (STDERR) channel.")

EOF
}

# Throw an error and return an unsuccessful return code.
error() {
  local message=${1}

  ${FMT} >&2 <<EOF

${RED}ERROR:${NORM} ${message}

EOF
  echo 254
  return 254
}

# Convert milliseconds to HH:MM:SS with the hours and minutes zero-filled.
ms2HMS() {
  local milliseconds=${1:?"Need some milliseconds"}
  typeset -Z 2 Hours Minutes Seconds

  (( Hours=milliseconds / 1000 / 60 / 60 ))
  (( Hours == 0 )) && unset Hours
  (( Minutes=milliseconds / 1000 / 60 ))
  (( Minutes == 0 )) && unset Minutes
  (( Seconds=milliseconds / 1000 % 60 ))

  if (( Minutes > 59 )) { (( Hours++ )) ; (( Minutes -= 60 )) ; }

  print ${Hours:+${Hours}:}${Minutes:+${Minutes}:}${Seconds}
}

# Check to be sure it is a valid Clock. Returns true or false based on
# the regex match test
validClock() {
  local definedClocks=${1} ; shift
  local requestedClock=${1} ; shift

  ${EXPR} "${definedClocks}" : ".*${requestedClock}.*" > /dev/null
}

# Display all the events in one clock along with its title
showClock() {
  local rivendellClockList="${1}" ; shift
  local clock="${1}" ; shift
  local VERBOSE=${1}

  local returnValue=1 		# assume success

  if ${EXPR} "${rivendellClockList}" : ".*${clock}.*" > /dev/null ; then

    printf '# Events for Clock "%s"\n' "${clock//_/ }"

    # doSQL output is <TAB>-separated, make sure the whitespace in the
    # variable expansions below is a single <TAB>.
    doSQL "SELECT event_name,start_time,length FROM ${clock}_CLK ORDER BY start_time ASC" | while read line ; do
      eventName=${line%%	*}
      eventDuration=${line##*	}
      eventStart=${${line#*	}%	*}
      eventEnd=$((eventStart + eventDuration))
      printf '\t* %30s at %5s for %5s (ending at %5s)\n' \
	     "'${eventName//_/ }'" \
	     $(ms2HMS ${eventStart}) \
	     $(ms2HMS ${eventDuration}) \
	     $(ms2HMS ${eventEnd})
    done

  else

    echo "${BOLD}${clock} is not a valid Clock name. Please use a valid Clock name.${NORM}" 1>&2
    returnValue=2

  fi

  return ${returnValue}
}

#################  BEGIN shell commands used in this script.  #################
# This script uses these 5 external commands.
# Look for them in their upper case, parameter expanded form.
ourCommands=(
  cat
  column
  expr
  fmt
  getopt
)
# Find the executables we need; this uses a little old fashioned shell and
# a ZSH trick -- the (U) in the eval(1) says to evaluate the parameter as
# all upper case letters. We will use the command names in upper case as
# variables by which to call the external commands used in this script.
for C in ${ourCommands} ; do
  for D in ${path} ; do
    [[ -x ${D}/${C} ]] && { eval ${(U)C//-/_}=${D}/${C} ; break }
  done
  [[ -x $(eval echo \$${(U)C//-/_}) ]] || { echo "Cannot find ${C}! Done."; return 1 }
done
##################  END shell commands used in this script.  ##################

# Get zsh functions necessary for this script.
if [[ -r ${ROOT:-/}usr/local/bin/zsh-functions ]] ; then
  source ${ROOT:-/}usr/local/bin/zsh-functions
else
  exit $(error "Cannot read support library '${ROOT:-/}usr/local/bin/zsh-functions'. Please consult your astrologist!")
fi

BOLD="${bold_color}"
NORM="${reset_color}"

# use getopt to parse the command line args
TEMP=$(${GETOPT} -o ahvV --long all,html,verbose,version -n ${0:t} -- "${@}")
if [ ${?} != 0 ] ; then echo "${BOLD}Terminating...${NORM}" >&2 ; exit 1 ; fi
# Note the quotes around "$TEMP": they are essential!
eval set -- "${TEMP}"
while :
do
  case "${1}" in
    -a|--all) SHOW_ALL=1 ; shift ;;
    -h|--html) HTML_OUTPUT=1 ; exit ;;
    -V|--version) showVersion=1 ; shift ;;
    -v|--verbose) VERBOSE=1 ; shift ;;
    --) shift ; break ;;
    *) echo "${BOLD}Internal error!${NORM}" ; exit 1 ;;
  esac
done
unset TEMP

if ((showVersion)) ; then
  echo "${0##*/}: version ${vMajor}.${vMinor}.${vPatch}-${${vHash#\$Hash: }%$}"
  exit 0
fi

rivendellClockList=( $(doSQL "show tables like '%CLK'" | sed -e 's/_CLK//' | sort) )

if (( SHOW_ALL )) ; then  

  # Display all the Clocks.
  for clock in ${rivendellClockList} ; do

    showClock "${rivendellClockList}" ${clock} ${VERBOSE}
    echo

  done

elif [[ -n "${1}" ]] ; then

  if [[ ${(L)1} = 'list' ]] ; then
    echo "Current list of CLOCKs:"
    echo ${(F)rivendellClockList} | ${COLUMN} -x -c ${COLUMNS}
    read clock\?"Enter a Clock to list: "
  else
    clock="${1}"
  fi

  showClock "${rivendellClockList}" ${clock} ${VERBOSE}

else

  usage ${0:t}

fi
    


# Local Variables: ***
# mode:shell-script ***
# indent-tabs-mode: f ***
# sh-indentation: 2 ***
# sh-basic-offset: 2 ***
# sh-indent-for-do: 0 ***
# sh-indent-after-do: + ***
# sh-indent-comment: t ***
# sh-indent-after-case: + ***
# sh-indent-after-done: 0 ***
# sh-indent-after-else: + ***
# sh-indent-after-if: + ***
# sh-indent-after-loop-construct: + ***
# sh-indent-after-open: + ***
# sh-indent-after-switch: + ***
# sh-indent-for-case-alt: + ***
# sh-indent-for-case-label: + ***
# sh-indent-for-continuation: + ***
# sh-indent-for-done: 0 ***
# sh-indent-for-else: 0 ***
# sh-indent-for-fi: 0 ***
# sh-indent-for-then: 0 ***
# End: ***
