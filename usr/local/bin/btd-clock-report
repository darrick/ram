#!/bin/zsh

##############################################################################
##############################################################################
##
## btd-clock-report - Display the events for the named Rivendell Clock on
##                    stdout.
##
## Requires a Clock name as the sole argument on the command line.
##
##############################################################################
##############################################################################

setopt NO_CASE_MATCH
zmodload zsh/regex
zmodload zsh/datetime
zmodload zsh/terminfo
zmodload zsh/stat
autoload colors
colors

# This script complies with Semantic Versioning: http://semver.org/
vMajor=0
vMinor=3
vPatch=0
vHash='$Hash$'

##############################################################################
## Locally defined subroutines
##############################################################################

# How to use this command.
usage() {
  local myName="${1}"

  "${CAT}" << EOF
$(${FMT} <<<"${myName}: display events for the named Rivendell Clock (or all Clocks) on STDOUT (aka, the terminal)")

Summary
"${myName##*/}" [ --version (-V) ] --all || <Clock_Name> || "list"

Description
$(${FMT} <<<"${myName} formats and dumps the contents of the named Clock. Use the word 'list' to see a list of Clock names.")

$(${FMT} <<<"The --all option causes ${myName} to display all Rivendell Clocks to STDOUT.")
$(${FMT} <<<"Use the --html output to cause ${myName} to display the output suitable for viewing with your favorite web browser.")

$(${FMT} <<<"The --verbose option enables more chattiness in the operation. ${myName} sends diagnostic output to the standard error (STDERR) channel.")

EOF
}

# Throw an error and return an unsuccessful return code.
error() {
  local message="${1}"

  "${FMT}" >&2 <<EOF

${RED}ERROR:${NORM} ${message}

EOF
  echo 254
  return 254
}

# Check to be sure it is a valid Clock. Returns true or false based on
# the regex match test
validClock() {
  local definedClocks="${1}" ; shift
  local requestedClock="${1}" ; shift

  [[ "${definedClocks}" =~ .*${requestedClock}.* ]]
}

# Display all the events in one clock along with its title.
showClock() {
  local short_name="${1}" ; shift
  local full_name="${1}" ; shift
  local VERBOSE="${1}"

  local returnValue=0 		# assume success
  local query lQuery cQuery
  local evNameWidth
  local eventCount
  local clkName="${full_name// /_}_CLK"

  # The pre-version-300 clocks structure
  if okDatabaseStructure "${clkName}:event_name+start_time+length" "${VERBOSE}" ; then
    query="SELECT event_name,start_time,length FROM \`${clkName}\` ORDER BY start_time ASC"
    cQuery="SELECT COUNT(*) FROM \`${clkName}\`"
    lQuery="SELECT LENGTH(event_name) FROM \`${clkName}\` ORDER BY LENGTH(event_name) DESC LIMIT 1"
  # The post-version-300 clocks structure
  elif okDatabaseStructure CLOCK_LINES:clock_name+event_name+start_time+length "${VERBOSE}" ; then
    query="SELECT event_name,start_time,length FROM CLOCK_LINES WHERE clock_name='${full_name}' ORDER BY start_time ASC"
    cQuery="SELECT COUNT(*) FROM CLOCK_LINES WHERE clock_name='${full_name}'"
    lQuery="SELECT LENGTH(event_name) FROM CLOCK_LINES WHERE clock_name='${full_name}' ORDER BY LENGTH(event_name) DESC LIMIT 1"
  fi

  evNameWidth="$(doSQL ${lQuery})"
  eventCount="$(doSQL ${cQuery})"
  printf '%3d Events for Clock "%s"\n' "${eventCount}" "${full_name//_/ }"

  # doSQL output is <TAB>-separated, make sure the whitespace in the
  # variable expansions below is a single <TAB>.
  doSQL "${query}" | while read line ; do
    eventName="${line%%	*}"
    eventDuration="${line##*	}"
    eventStart="${${line#*	}%	*}"
    eventEnd=$((eventStart + eventDuration))
    printf "\t* %${evNameWidth}s at %5s for %5s (ending at %5s)\n" \
	   "${eventName//_/ }" \
	   $(ms2HMS "${eventStart}") \
	   $(ms2HMS "${eventDuration}") \
	   $(ms2HMS "${eventEnd}")
  done

  return "${returnValue}"
}

################### BEGIN shell commands used in this script. ###################
# This script uses these 4 external commands.
# Look for them in their upper case, parameter expanded form.
typeset -a our_commands
our_commands=( cat column fmt getopt )
# Find the executables we need; this uses a little old fashioned shell and
# a ZSH trick -- the (U) in the eval(1) says to evaluate the parameter as
# all upper case letters. We will use the command names in upper case as
# variables by which to call the external commands used in this script.
for C in ${our_commands} ; do
  for D in ${path} ; do
    [[ -x "${D}/${C}" ]] && { eval "${(U)C//-/_}"="${D}/${C}" ; break }
  done
  [[ -x $(eval print \$${(U)C//-/_}) ]] || { print "Cannot find ${C}! Done."; return 1 }
done
unset our_commands
#################### END shell commands used in this script. ####################

# Get zsh functions necessary for this script.
if [[ -r "${ROOT:-/}usr/local/bin/zsh-functions" ]] ; then
  source "${ROOT:-/}usr/local/bin/zsh-functions"
else
  exit $(error "Cannot read support library '${ROOT:-/}usr/local/bin/zsh-functions'. Please consult your astrologist!")
fi

BOLD="${bold_color}"
NORM="${reset_color}"

# use getopt to parse the command line args
TEMP=$(${GETOPT} -o ahvV --long all,html,verbose,version -n ${0:t} -- "${@}")
if [ "${?}" != 0 ] ; then echo "${BOLD}Terminating...${NORM}" >&2 ; exit 1 ; fi
# Note the quotes around "$TEMP": they are essential!
eval set -- "${TEMP}"
while :
do
  case "${1}" in
    -a|--all) SHOW_ALL=1 ; shift ;;
    -h|--help) usage ${0:t} ; exit ;;
    -V|--version) showVersion=1 ; shift ;;
    -v|--verbose) VERBOSE=1 ; shift ;;
    --) shift ; break ;;
    *) echo "${BOLD}Internal error!${NORM}" ; exit 1 ;;
  esac
done
unset TEMP

if ((showVersion)) ; then
  echo "${0##*/}: version ${vMajor}.${vMinor}.${vPatch}-${${vHash#\$Hash: }%$}"
  exit 0
fi

# Figure out which schema we are using for Clocks and Events.
typeset -A rivendellClockList
if okDatabaseStructure CLOCKS:name+short_name ; then
  # IFS must be just <Tab> and Newline.
  oIFS="${IFS}"
  IFS="	
"
  rivendellClockList=( $(doSQL "SELECT short_name,name FROM CLOCKS") )
  IFS="${oIFS}"
else
  # Don't really know what else to do here...
  printf "Unknown database schema version (%03d). I give up." $(rdDatabaseVersion)
fi

if (( SHOW_ALL )) ; then  

  # Display all the Clocks.
  for clock in ${(ko)rivendellClockList} ; do

    showClock "${clock}" "${rivendellClockList[${clock}]}" "${VERBOSE}"
    echo

  done

elif [[ -n "${1}" ]] ; then

  if [[ "${(L)1}" = 'list' ]] ; then
    echo "Current list of CLOCKs:"
    # (F) joins array elements with newline separator.
    echo "${(F)rivendellClockList}" | "${COLUMN}" -x -c "${COLUMNS}"
    read clock\?"Enter a Clock to list: "
  else
    clock="${1}"
  fi

  if validClock "${rivendellClockList}" "${clock}" ; then
    showClock "${clock}" "${VERBOSE}"
  fi

else

  usage "${0:t}"

fi
    
exit

# Local Variables: ***
# mode:shell-script ***
# indent-tabs-mode: f ***
# sh-indentation: 2 ***
# sh-basic-offset: 2 ***
# sh-indent-for-do: 0 ***
# sh-indent-after-do: + ***
# sh-indent-comment: t ***
# sh-indent-after-case: + ***
# sh-indent-after-done: 0 ***
# sh-indent-after-else: + ***
# sh-indent-after-if: + ***
# sh-indent-after-loop-construct: + ***
# sh-indent-after-open: + ***
# sh-indent-after-switch: + ***
# sh-indent-for-case-alt: + ***
# sh-indent-for-case-label: + ***
# sh-indent-for-continuation: + ***
# sh-indent-for-done: 0 ***
# sh-indent-for-else: 0 ***
# sh-indent-for-fi: 0 ***
# sh-indent-for-then: 0 ***
# End: ***
